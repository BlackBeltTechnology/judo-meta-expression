context EXPR!ReferenceBinding {
	
	constraint ReferenceExpressionMatchesBinding {
		guard: self.expression.isKindOf(EXPR!ReferenceExpression)
		check: modelAdapter.getSuperTypes(self.expression.getObjectType(modelAdapter)).including(self.expression.getObjectType(modelAdapter))
			.includes(modelAdapter.getTarget(modelAdapter.getReference(modelAdapter.get(self.typeName).get(), self.referenceName).get()))
		message: "Reference named " + self.referenceName + " does not match the type of the assigned expression"
	}
	
	constraint ObjectExpressionMatchesBinding {
		guard: self.expression.isKindOf(EXPR!ObjectExpression)
		check: not modelAdapter.isCollectionReference(modelAdapter.getReference(modelAdapter.get(self.typeName).get(), self.referenceName).get())
		message: "Reference named " + self.referenceName + " refers to a collection but the assigned expression evaluates to an object."
	}
	
	constraint CollectionExpressionMatchesBinding {
		guard: self.expression.isKindOf(EXPR!CollectionExpression)
		check: modelAdapter.isCollectionReference(modelAdapter.getReference(modelAdapter.get(self.typeName).get(), self.referenceName).get())
		message: "Reference named " + self.referenceName + " refers to an object but the assigned expression evaluates to a collection."
	}
}
