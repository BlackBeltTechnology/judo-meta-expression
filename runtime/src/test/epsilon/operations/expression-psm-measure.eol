@cached
operation EXPR!NumericAttribute isMeasured() : Boolean {
    return modelAdapter.isMeasured(self.objectExpression.getObjectType().getAttribute(self.attributeName));
}

@cached
operation EXPR!NumericAttribute getUnit() {
    if (self.isMeasured()) {
        var attributeType = self.getAttributeType();
        if (attributeType.isDefined()) {
            return attributeType.getUnit();
        } else {
            return null;
        }
    } else {
        return null;
    }
}

@cached
operation EXPR!MeasuredInteger isMeasured() : Boolean {
    return true;
}

@cached
operation EXPR!MeasuredDecimal isMeasured() : Boolean {
    return true;
}

operation JUDOPSM!Measure getUnit(name : String) : JUDOPSM!Unit {
    return self.units.selectOne(u | u.name = name or u.symbol = name);
}

@cached
operation JUDOPSM!MeasuredType getUnit() : JUDOPSM!Unit {
    // TODO - rename usages to getStoreUnit()
    return self.storeUnit;
}

@cached
operation JUDOPSM!Unit getMeasure() : JUDOPSM!Measure {
    return JUDOPSM!Measure.all.selectOne(m | m.units.contains(self));
}

@cached
operation getDimensions() : Map {
    var dimensions = new Map;
    for (m in JUDOPSM!Measure.all) {
        dimensions.put(m.getBaseMeasures(), m);
    }
    return dimensions;
}

@cached
operation JUDOPSM!Measure getBaseMeasures() : Map {
    if (self.isKindOf(JUDOPSM!DerivedMeasure)) {
        var baseMeasures = new Map;
        for (t in self.terms) {
            var termBases = t.unit.getMeasure().getBaseMeasures();
            for (m in termBases.keySet()) {
                var exponent = termBases.get(m) * t.exponent;

                var currentExponent = baseMeasures.get(m);
                if (currentExponent.isDefined()) {
                    var newExponent = currentExponent + exponent;
                    if (newExponent <> 0) {
                        baseMeasures.put(m, newExponent);
                    } else {
                        baseMeasures.remove(m);
                    }
                } else {
                    baseMeasures.put(m, exponent);
                }
            }
        }
        return baseMeasures;
    } else {
        return Map{self = 1};
    }
}

@cached
operation EXPR!NumericAttribute getMeasure() : JUDOPSM!Measure {
    if (self.isMeasured()) {
        return JUDOPSM!Measure.all.selectOne(m | m.units.contains(self.getUnit()));
    } else {
        return Map{};
    }
}

@cached
operation EXPR!MeasuredDecimal getUnit() {
    if (self.measure.isDefined()) {
        var m = self.measure.get(modelAdapter);
        if (m.isPresent()) {
            return m.get().units.selectOne(u | u.name = self.unitName or u.symbol = self.unitName);
        } else {
            return null;
        }
    } else {
        var units = JUDOPSM!Unit.all.select(u | u.name = self.unitName or u.symbol = self.unitName);
        if (units.size() == 1) {
            return units.get(0);
        } else {
            units.collect(u | u.getMeasure().name + ": " + u.name + " [" + u.symbol + "]").concat(", ").println("Multiple units found with name " + self.unitName + ": ");
            return null;
        }
    }
}

@cached
operation EXPR!MeasuredInteger getUnit() {
    if (self.measure.isDefined()) {
        var m = self.measure.get(modelAdapter);
        if (m.isPresent()) {
            return m.get().units.selectOne(u | u.name = self.unitName or u.symbol = self.unitName);
        } else {
            return null;
        }
    } else {
        var units = JUDOPSM!Unit.all.select(u | u.name = self.unitName or u.symbol = self.unitName);
        if (units.size() == 1) {
            return units.get(0);
        } else {
            units.collect(u | u.getMeasure().name + ": " + u.name + " [" + u.symbol + "]").concat(", ").println("Multiple units found with name " + self.unitName + ": ");
            return null;
        }
    }
}
