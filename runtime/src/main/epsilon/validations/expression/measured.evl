context EXPR!MeasuredInteger {
    constraint MeasureIsValid {
        guard: self.satisfiesAll("Resolved")
        
        check: self.isDimensionDefined()
        message: "Measure of integer constant is invalid: " + self.toString()
    }
}

context EXPR!MeasuredDecimal {
    constraint MeasureIsValid {
        guard: self.satisfiesAll("Resolved")
        
        check: self.isDimensionDefined()
        message: "Measure of decimal constant is invalid: " + self.toString()
    }
}

context EXPR!IntegerAttribute {
    constraint MeasureIsValid {
        guard: self.satisfiesAll("Resolved")
        
        check: not modelAdapter.isMeasured(self) or (self.isDimensionDefined())
        message: "Measure of expression is invalid: " + self.toString()
    }
}

context EXPR!DecimalAttribute {
    constraint MeasureIsValid {
        guard: self.satisfiesAll("Resolved")
        
        check: not modelAdapter.isMeasured(self) or (self.isDimensionDefined())
        message: "Measure of expression is invalid: " + self.toString()
    }
}

context EXPR!IntegerAritmeticExpression {
	// detected base measures are valid
    constraint MeasureIsValid {
        guard: self.satisfiesAll("Resolved") and modelAdapter.isMeasured(self) and
               (not modelAdapter.isMeasured(self.left) or self.left.satisfiesAll("MeasureIsValid")) and 
               (not modelAdapter.isMeasured(self.right) or self.right.satisfiesAll("MeasureIsValid"))
        
        check: modelAdapter.getDimension(self).isPresent()
        message: "Measure of expression is invalid: " + self.toString()
    }
    
    /*// measured operation is valid
    constraint MeasureIsValid {
    	guard: self.satisfiesAll("Resolved") and not modelAdapter.isMeasured(self) and
               (not modelAdapter.isMeasured(self.left) or self.left.satisfiesAll("MeasureIsValid")) and 
               (not modelAdapter.isMeasured(self.right) or self.right.satisfiesAll("MeasureIsValid"))
    	
        check: modelAdapter.getDimension(self).isPresent() or not self.left.satisfiesAll("MeasureIsValid") or not self.right.satisfiesAll("MeasureIsValid")
    	message: "Operation of measured expression is invalid: " + self.toString()
   	}*/
}

context EXPR!DecimalAritmeticExpression {
	// detected base measures are valid
    constraint MeasureIsValid {
        guard: self.satisfiesAll("Resolved") and modelAdapter.isMeasured(self) and
               (not modelAdapter.isMeasured(self.left) or self.left.satisfiesAll("MeasureIsValid")) and 
               (not modelAdapter.isMeasured(self.right) or self.right.satisfiesAll("MeasureIsValid"))
        
        check: modelAdapter.getDimension(self).isPresent()
        message: "Measure of expression is invalid: " + self.toString()
    }
    
    /*// measured operation is valid
    constraint MeasureIsValid {
    	guard: self.satisfiesAll("Resolved") and not modelAdapter.isMeasured(self) and
               (not modelAdapter.isMeasured(self.left) or self.left.satisfiesAll("MeasureIsValid")) and 
               (not modelAdapter.isMeasured(self.right) or self.right.satisfiesAll("MeasureIsValid"))
    	
        check: modelAdapter.getDimension(self).isPresent() or not self.left.satisfiesAll("MeasureIsValid") or not self.right.satisfiesAll("MeasureIsValid")
    	message: "Operation of measured expression is invalid: " + self.toString()
   	} */
}

context EXPR!IntegerOppositeExpression {
    constraint MeasureIsValid {
        guard: self.satisfiesAll("Resolved") and modelAdapter.isMeasured(self) and self.expression.satisfiesAll("MeasureIsValid")
        
        check: self.isDimensionDefined()
        message: "Measure of expression is invalid: " + self.toString()
    }
}

context EXPR!DecimalOppositeExpression {
    constraint MeasureIsValid {
        guard: self.satisfiesAll("Resolved") and modelAdapter.isMeasured(self) and self.expression.satisfiesAll("MeasureIsValid")
        
        check: self.isDimensionDefined()
        message: "Measure of expression is invalid: " + self.toString()
    }
}

context EXPR!IntegerAggregatedExpression {
    constraint MeasureIsValid {
        guard: self.satisfiesAll("Resolved") and modelAdapter.isMeasured(self) and self.expression.satisfiesAll("MeasureIsValid")
        
        check: self.isDimensionDefined()
        message: "Measure of expression is invalid: " + self.toString()
    }
}

context EXPR!DecimalAggregatedExpression {
    constraint MeasureIsValid {
        guard: self.satisfiesAll("Resolved") and modelAdapter.isMeasured(self) and self.expression.satisfiesAll("MeasureIsValid")
        
        check: self.isDimensionDefined()
        message: "Measure of expression is invalid: " + self.toString()
    }
}

context EXPR!RoundExpression {
    constraint MeasureIsValid {
        guard: self.satisfiesAll("Resolved") and modelAdapter.isMeasured(self) and self.expression.satisfiesAll("MeasureIsValid")
        
        check: self.isDimensionDefined()
        message: "Measure of expression is invalid: " + self.toString()
    }
}

context EXPR!IntegerSwitchExpression {
    constraint MeasureIsValid {
        guard: self.satisfiesAll("Resolved") and modelAdapter.isMeasured(self) and self.cases.select(c | not c.expression.satisfiesAll("MeasureIsValid")).size() == 0 and (not self.defaultExpression.isDefined() or self.defaultExpression.satisfiesAll("MeasureIsValid"))
        
        check: self.isDimensionDefined()
        message: "Measure of expression is invalid: " + self.toString()
    }
}

context EXPR!DecimalSwitchExpression {
    constraint MeasureIsValid {
        guard: self.satisfiesAll("Resolved") and modelAdapter.isMeasured(self) and self.cases.select(c | not c.expression.satisfiesAll("MeasureIsValid")).size() == 0 and (not self.defaultExpression.isDefined() or self.defaultExpression.satisfiesAll("MeasureIsValid"))
        
        check: self.isDimensionDefined()
        message: "Measure of expression is invalid: " + self.toString()
    }
}

/*context EXPR!NumericExpression {
    constraint MeasureOfCompleteExpressionIsDefined {
        guard: self.satisfiesAll("Resolved") and evaluator.isRoot(self) and modelAdapter.isMeasured(self)
        
        check: self.isDimensionDefined()
        message: "Measure is not defined for complete expression: " + self.toString()
    }
} */

context EXPR!IntegerComparison {
    constraint Resolved {
        check: true
        message: "Unsupported expression: " + self.toString()
    }
    
    // both compared values must be measured
    constraint ComparisonIsMeasured {
        guard: self.satisfiesAll("Resolved") and (modelAdapter.isMeasured(self.left) or modelAdapter.isMeasured(self.right))
        
        check: modelAdapter.isMeasured(self.left) and modelAdapter.isMeasured(self.right)
        message: "Both left and right sides must be measured: " + self.toString()
    }
    
    // dimensions of compared measured values must match
    constraint MeasuresAreMatching {
        guard: self.satisfiesAll("Resolved", "ComparisonIsMeasured") and self.left.satisfiesAll("MeasureIsValid") and self.right.satisfiesAll("MeasureIsValid")
        
        check: modelAdapter.getDimension(self.left) == modelAdapter.getDimension(self.right)
        message: "Dimensions of comparison are not matching: " + self.toString()
    }
}

context EXPR!DecimalComparison {
    constraint Resolved {
        check: true
        message: "Unsupported expression: " + self.toString()
    }
    
    // both compared values must be measured
    constraint ComparisonIsMeasured {
        guard: self.satisfiesAll("Resolved") and (modelAdapter.isMeasured(self.left) or modelAdapter.isMeasured(self.right))
        
        check: modelAdapter.isMeasured(self.left) and modelAdapter.isMeasured(self.right)
        message: "Both left and right sides must be measured: " + self.toString()
    }
    
    // dimensions of compared measured values must match
    constraint MeasuresAreMatching {
        guard: self.satisfiesAll("Resolved", "ComparisonIsMeasured") and self.left.satisfiesAll("MeasureIsValid") and self.right.satisfiesAll("MeasureIsValid")
        
        check: modelAdapter.getDimension(self.left) == modelAdapter.getDimension(self.right)
        message: "Dimensions of comparison are not matching: " + self.toString()
    }
}
