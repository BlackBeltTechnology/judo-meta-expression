import "expression/_importExpression.evl";

operation displayAllExpressions() {
    for (expr in EXPR!Expression) {
        expr.toString().println("Expression: ");
        if (expr.isKindOf(EXPR!ObjectExpression) or expr.isKindOf(EXPR!CollectionExpression) and expr.getObjectType(modelAdapter).isDefined()) {
            expr.getObjectType(modelAdapter).name.println(" - OBJECT TYPE of object expression: ");
        }
        if (expr.isKindOf(EXPR!NumericExpression) and expr.isMeasured(modelAdapter)) {
            var measure = modelAdapter.getMeasure(expr).orElse(null);
            if (measure.isDefined()) {
                measure.name.println(" - measure: ");
            } else {
                "UNKNOWN".println(" - measure: ");
            }
        }
    }
}

pre {
    /*for (e in EXPR!Expression.all.select(e | e.isComplete())) {
        e.toString().println("Complete expression: ");
    }
    
    for (e in EXPR!Expression.all.select(e | e.isFragment())) {
        e.toString().println("Fragment expression: ");
    } */
    
    displayAllExpressions();
}
