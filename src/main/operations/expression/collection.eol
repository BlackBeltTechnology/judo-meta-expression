@cached
operation EXPR!ImmutableCollection getObjectType() {
    return self.elementName.getObjectType();
}

@cached
operation EXPR!CollectionFilterExpression getObjectType() {
    var base = self.collectionExpression.getObjectType();
    if (base.isDefined()) {
        if (self.filter.isDefined()) {
            if (self.filter.filterAndCastingType.isDefined()) {
                return self.filter.filterAndCastingType.getObjectType();
            } else {
                return base;
            }
        } else {
            return base;
        }
    }
}

@cached
operation EXPR!CollectionNavigationFromObjectExpression getObjectType() {
    return self.objectExpression.getObjectType().getReferenceType(self.referenceName); 
}

@cached
operation EXPR!CollectionNavigationFromCollectionExpression getObjectType() {
    return self.collectionExpression.getObjectType().getReferenceType(self.referenceName); 
}

@cached
operation EXPR!CollectionVariableReference getObjectType() {
    return self.variable.getObjectType();
}

@cached
operation EXPR!SortExpression getObjectType() {
    return self.collectionExpression.getObjectType();
}

@cached
operation EXPR!OrderBy getOwner() {
    var sortExpression = EXPR!SortExpression.all.selectOne(e | e.orderBy = self);
    if (sortExpression.isDefined()) {
        return sortExpression;
    }
    
    self.toString().println("Unable to detect owner of order by expression: ");
    
    return null;
}

@cached
operation EXPR!OrderBy getObjectType() {
    var owner = self.getOwner();
    
    if (owner.isDefined()) {
        return owner.getObjectType();
    } else {
        return null;
    }
}

@cached
operation EXPR!IntegerAggregatedExpression getAttributeType() {
    var collectionType = self.collectionExpression.getObjectType();
    
    if (collectionType.isDefined()) {
        return collectionType.getAttributeType(self.attributeName);
    } else {
        return null;
    }
}

@cached
operation EXPR!DecimalAggregatedExpression getAttributeType() {
    var collectionType = self.collectionExpression.getObjectType();
    
    if (collectionType.isDefined()) {
        return collectionType.getAttributeType(self.attributeName);
    } else {
        return null;
    }
}
