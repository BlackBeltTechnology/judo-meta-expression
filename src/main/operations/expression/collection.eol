@cached
operation EXPR!ImmutableCollection getObjectType() {
    return self.elementName.getObjectType();
}

@cached
operation EXPR!CollectionFilterExpression getObjectType() {
    return self.collectionExpression.getObjectType();
}

@cached
operation EXPR!CollectionNavigationFromObjectExpression getReference() {
    var objectType = self.objectExpression.getObjectType();
    if (objectType.isDefined()) {
        return objectType.getReferenceType(self.referenceName);
    } else {
        return null;
    }
}

@cached
operation EXPR!CollectionNavigationFromObjectExpression getObjectType() {
    var ref = self.getReference();
    if (ref.isDefined()) {
        return ref.getTarget();
    } else {
        return null;
    }
}

@cached
operation EXPR!CollectionNavigationFromCollectionExpression getReference() {
    var collectionType = self.collectionExpression.getObjectType();
    if (collectionType.isDefined()) {
        return collectionType.getReferenceType(self.referenceName);
    } else {
        return null;
    }
}

@cached
operation EXPR!ObjectNavigationFromCollectionExpression getReference() {
    var collectionType = self.collectionExpression.getObjectType();
    if (collectionType.isDefined()) {
        return collectionType.getReferenceType(self.referenceName);
    } else {
        return null;
    }
}

@cached
operation EXPR!CollectionNavigationFromCollectionExpression getObjectType() {
    var ref = self.getReference();
    if (ref.isDefined()) {
        return ref.getTarget();
    } else {
        return null;
    }
}

@cached
operation EXPR!ObjectNavigationFromCollectionExpression getObjectType() {
    var ref = self.getReference();
    if (ref.isDefined()) {
        return ref.getTarget();
    } else {
        return null;
    }
}

@cached
operation EXPR!CollectionNavigationFromObjectExpression isCollection() {
    var ref = self.getReference();
    if (ref.isDefined()) {
        return ref.isCollection();
    } else {
        return null;
    }
}

@cached
operation EXPR!CollectionNavigationFromCollectionExpression isCollection() {
    var ref = self.getReference();
    if (ref.isDefined()) {
        return ref.isCollection();
    } else {
        return null;
    }
}

@cached
operation EXPR!ObjectNavigationFromCollectionExpression isCollection() {
    var ref = self.getReference();
    if (ref.isDefined()) {
        return ref.isCollection();
    } else {
        return null;
    }
}

@cached
operation EXPR!CollectionVariableReference getObjectType() {
    return self.variable.getObjectType();
}

@cached
operation EXPR!SortExpression getObjectType() {
    return self.collectionExpression.getObjectType();
}

@cached
operation EXPR!IntegerAggregatedExpression getObjectType() {
    return self.collectionExpression.getObjectType();
}

@cached
operation EXPR!DecimalAggregatedExpression getObjectType() {
    return self.collectionExpression.getObjectType();
}

@cached
operation EXPR!CastCollection getObjectType() {
    return self.elementName.getObjectType();
}

/*@cached
operation EXPR!IntegerAggregatedExpression getAttributeType() {
    var collectionType = self.collectionExpression.getObjectType();
    
    if (collectionType.isDefined()) {
        return collectionType.getAttributeType(self.attributeName);
    } else {
        return null;
    }
}

@cached
operation EXPR!DecimalAggregatedExpression getAttributeType() {
    var collectionType = self.collectionExpression.getObjectType();
    
    if (collectionType.isDefined()) {
        return collectionType.getAttributeType(self.attributeName);
    } else {
        return null;
    }
} */
