@cached
operation EXPR!ElementName getNamespace() : ASM!EPackage {
    var ns : ASM!EPackage;
        
    for (nsName in self.namespace.split("\\s*\\::\\s*")) {
        if (ns.isDefined()) {
            ns = ns.eSubpackages.selectOne(p | p.name = nsName);
        } else {
            ns = ASM!EPackage.all.selectOne(p | p.name = nsName);
        }
    }
    
    return ns;
}

@cached
operation EXPR!ElementName getObjectType() : ASM!EClass {
    // not restricted to entity classes!
    return self.getNamespace().eClassifiers.selectOne(et | et.isKindOf(ASM!EClass) and et.name = self.name);
}

@cached
operation EXPR!ElementName getEnumerationType() : ASM!EEnum {
    return self.getNamespace().eClassifiers.selectOne(t | t.isKindOf(ASM!EEnum) and t.name = self.name);
}

operation ASM!EClass getReferenceType(name: String) : ASM!EReference {
    return  self.eAllReferences.selectOne(r | r.name = name);
}

@cached
operation ASM!EReference isCollection() : Boolean {
    return self.upperBound > 1 or self.upperBound == -1;
}

@cached
operation ASM!EReference getTarget() : ASM!EClass {
    return self.eType;
}

@cached
operation String getDataTypeByName() : ASM!EDataType {
    return ASM!EDataType.all.selectOne(t | t.name = self);
}

operation ASM!EClass getAttributeType(name: String) : ASM!EClassifier {
    var attr = self.eAllAttributes.selectOne(r | r.name = name);
    if (attr.isDefined()) {
        var type = attr.eAttributeType;
        attr.println("ATTR: ");
        if (type.isKindOf(ASM!EEnum)) {
            type.println("ENUM: ");
            return type;
        } else {
            var dataType = attr.eAttributeType.name.getDataTypeByName();
            dataType.println("DATATYPE: ");
            return dataType;
        }
    } else {
        return null;
    }
}

@cached
operation ASM!EClass getSuperTypes() : Collection {
    return self.eAllSuperTypes;
}

@cached
operation ASM!EDataType isNumeric() : Boolean {
    return self.isInteger() or self.isDecimal();
}

@cached
operation ASM!EDataType isInteger() : Boolean {
    return "JInteger".getDataTypeByName() == self
        or "JLong".getDataTypeByName() == self
        or "JBigInteger".getDataTypeByName() == self
        or "EFloat".getDataTypeByName() == self
        or "EDouble".getDataTypeByName() == self
        or "EFloatObject".getDataTypeByName() == self
        or "EDoubleObject".getDataTypeByName() == self
        or "EBigInteger".getDataTypeByName() == self;
}

@cached
operation ASM!EDataType isDecimal() : Boolean {
    return "JFloat".getDataTypeByName() == self
        or "JDouble".getDataTypeByName() == self
        or "JBigDecimal".getDataTypeByName() == self
        or "EFloat".getDataTypeByName() == self
        or "EDouble".getDataTypeByName() == self
        or "EFloatObject".getDataTypeByName() == self
        or "EDoubleObject".getDataTypeByName() == self
        or "EBigDecimal".getDataTypeByName() == self;
}

@cached
operation ASM!EDataType isBoolean() : Boolean {
    return "JBoolean".getDataTypeByName() == self
        or "EBoolean".getDataTypeByName() == self
        or "EBooleanObject".getDataTyoeByName() == self;
}

@cached
operation ASM!EDataType isString() : Boolean {
    return "JString".getDataTypeByName() == self
        or "EString".getDataTypeByName() == self;
}

@cached
operation ASM!EDataType isEnumeration() : Boolean {
    return self.isKindOf(ASM!EEnum);
}

operation ASM!EEnum contains(memberName : String) : Boolean {
    return self.eLiterals.selectOne(m | m.name = memberName).isDefined();
}

@cached
operation ASM!ENamedElement getName() : String {
    return self.name;
}
