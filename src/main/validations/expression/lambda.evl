context EXPR!EntityFilterExpression {
    guard: self.filter.filterAndCastingType.isDefined()

    constraint LambdaTypeMustBeSameOrRestricting {
        guard: self.filter.filterAndCastingType.satisfiesAll("EntityTypeIsValid") and self.entityExpression.satisfiesAll("EntityTypeIsDefined")
        
        check: self.filter.filterAndCastingType.getEntityType().getSuperTypes().contains(self.entityExpression.getEntityType())
        message: "Type of filtered expression (" + self.entityExpression.getEntityType().getName() + ") is not superType of lambda variable (" + self.filter.filterAndCastingType.getEntityType().getName() + ")"
    }
}

context EXPR!EntitySetFilterExpression {
    guard: self.filter.filterAndCastingType.isDefined()

    constraint LambdaTypeMustBeSameOrRestricting {
        guard: self.filter.filterAndCastingType.satisfiesAll("EntityTypeIsValid") and self.entitySetExpression.satisfiesAll("EntitySetTypeIsDefined")
        
        check: self.filter.filterAndCastingType.getEntityType().getSuperTypes().contains(self.entitySetExpression.getEntityType())
        message: "Type of filtered expression (" + self.entitySetExpression.getEntityType().getName() + ") is not superType of lambda variable (" + self.filter.filterAndCastingType.getEntityType().getName() + ")"
    }
}
