context EXPR!ObjectFilterExpression {
    guard: self.filter.filterAndCastingType.isDefined()

    constraint ObjectLambdaTypeIsSameOrRestricting {
        guard: self.filter.filterAndCastingType.satisfiesAll("ObjectTypeIsValid") and self.objectExpression.satisfiesAll("ObjectTypeIsDefined")
        
        check: self.filter.filterAndCastingType.getObjectType().getSuperTypes().contains(self.objectExpression.getObjectType())
        message: "Type of filtered expression (" + self.objectExpression.getObjectType().getName() + ") is not superType of lambda variable (" + self.filter.filterAndCastingType.getObjectType().getName() + ")"
    }
}

context EXPR!CollectionFilterExpression {
    guard: self.filter.filterAndCastingType.isDefined()

    constraint CollectionLambdaTypeIsSameOrRestricting {
        guard: self.filter.filterAndCastingType.satisfiesAll("ObjectTypeIsValid") and self.collectionExpression.satisfiesAll("CollectionTypeIsDefined")
        
        check: self.filter.filterAndCastingType.getObjectType().getSuperTypes().contains(self.collectionExpression.getObjectType())
        message: "Type of filtered expression (" + self.collectionExpression.getObjectType().getName() + ") is not superType of lambda variable (" + self.filter.filterAndCastingType.getObjectType().getName() + ")"
    }
}
