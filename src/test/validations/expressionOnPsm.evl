import "../operations/psm.eol";
import "../../main/validations/expression/_importExpression.evl";

operation displayAllExpressions() {
    for (expr in EXPR!Expression) {
        expr.toString().println("Expression: ");
        expr.type().name.println(" - type: ");
        if (expr.isKindOf(EXPR!ObjectExpression) or expr.isKindOf(EXPR!CollectionExpression) and expr.getObjectType().isDefined()) {
            expr.getObjectType().getName().println(" - OBJECT TYPE of object expression: ");
        }
        if (expr.isKindOf(EXPR!NumericExpression) and expr.isMeasured()) {
        	var measure = expr.getMeasure();
        	if (measure.isDefined()) {
        		measure.name.println(" - measure: ");
        	} else {
        		"UNKNOWN".println(" - measure: ");
        	}
        }
    }
    for (attr in EXPR!AttributeSelector) {
       var type = attr.getAttributeType();
       attr.toString().println("Attribute: ");
       if (type.isDefined()) {
           attr.type().name.println(" - type: ");
           type.getName().println(" - DATA TYPE of attribute: ");
       }
    }
}

pre {
    for (e in getStandaloneExpressions()) {
        e.toString().println("Standalone expression: ");
    }
    displayAllExpressions();
}
